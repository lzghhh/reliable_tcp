#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
import hashlib
import zlib
from json import JSONDecodeError


class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)
        self.received_packets = []

        self.remote_host = None
        self.remote_port = None
        self.printSequence = 0

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                try:
                    data, addr = conn.recvfrom(65535)

                    # Grab the remote host/port if we don't alreadt have it
                    if self.remote_host is None:
                        self.remote_host = addr[0]
                        self.remote_port = addr[1]

                    # To determine whether the packet is corrupted or not basing on json decode.
                    try:
                        msg = json.loads(data.decode('utf-8'))
                    except JSONDecodeError:
                        continue

                    # To determine whether the packet is corrupted or not basing on hash value.
                    # If a corrupted file detected, ignore this message (sender will mark it as a timeout and
                    # resend the packet).
                    if msg["hash"] != hashlib.shake_256(str(msg["data"]).encode("utf-8")).hexdigest(3):
                        continue

                    # Normal packet received.
                    self.log("Received data message %s" % msg)
                    # To determine whether a packet has been received before or it is a new message data (determined
                    # by sequence number).
                    # If this data is not received, an ValueError will be raised and store it in the packet_storage.
                    # If this data has been received (in the storage), also send an ack to the sender (since we
                    # are not sure about the status and sequence of the packet (being dropped or duplicated)).
                    if self.received_packets.index(msg) >= 0:
                        self.send({"type": "ack", "Sequence": msg["Sequence"],
                                   "hash": hashlib.shake_256(str(msg["data"]).encode('utf-8')).hexdigest(3),
                                   "time": float(str(time.time())[6:15])})

                        continue

                except ValueError:
                    # Receive a new data that has not been received before.
                    # Add the data into the packet_storage.
                    self.received_packets.append(msg)
                    # Always send back an ack
                    self.send({"type": "ack", "Sequence" : msg["Sequence"],
                               "hash": hashlib.shake_256(str(msg["data"]).encode('utf-8')).hexdigest(3),
                               "time": float(str(time.time())[6:15])})
                    # Order the sequence number.
                    # The received will be printed basing on the sequence number order.
                    # Larger sequence number will be stored first and being printed after all previous packet arrived.
                    # For example, the current sequence number is 2. If we received a data with sequence number 5,
                    # it will be printed after receiving data with sequence number 3 and 4.
                    while True:
                        res = next((msg for msg in self.received_packets
                                    if msg["Sequence"] == self.printSequence), None)
                        # No more packet to print, the current one is the last packet data. 
                        if res == None:
                            break
                        print(res["data"], end='', flush=True)
                        self.printSequence += 1
                    pass

        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()