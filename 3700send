#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
from json import JSONDecodeError

DATA_SIZE = 1375


class Sender:
    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False
        self.packet_storage = {}
        self.tolerance = 1
        self.sequenceNumber = 0;

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

    def run(self):
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]

            socks = select.select(sockets, [], [], 0.1)[0]
            if self.packet_storage is not None:
                for x in self.packet_storage.keys():
                    # in packet_storage,key is data, 0 is time, 1 is sequence number
                    if time.time() - self.packet_storage[x][0] > 0.75:
                        seq_temp = self.packet_storage[x][1]
                        msg = {"type": "msg", "Sequence": seq_temp, "data": x}
                        self.send(msg)
                        self.tolerance = math.ceil(self.tolerance / 2)
                        self.packet_storage[x][0] = time.time()
            for conn in socks:
                try:
                    if conn == self.socket:
                        k, addr = conn.recvfrom(65535)
                        msg = k.decode('utf-8')
                        msg = json.loads(msg)

                        for x in list(self.packet_storage.keys()):
                            if x == msg["data"] and msg["type"] == "ack":
                                self.packet_storage.pop(x, None)
                                self.log("dellllllllllllllllllllllllllll")
                                self.tolerance = 2
                        self.log("Received message '%s'" % msg)


                        self.waiting = False
                    elif conn == sys.stdin:
                        for x in range(self.tolerance):
                            # self.log("ssssssssssssssssssssssssssssssssssssssssss")
                            data = sys.stdin.read(DATA_SIZE)
                            if len(data) == 0:
                                if self.packet_storage:
                                    continue
                                self.log("All done!")
                                sys.exit(0)
                            msg = {"type": "msg", "Sequence": self.sequenceNumber, "data": data}
                            self.packet_storage[msg["data"]] = [time.time(), self.sequenceNumber]
                            self.sequenceNumber += 1
                            self.log("Sending message '%s'" % msg)
                            self.send(msg)
                            self.waiting = True
                except (NameError, JSONDecodeError):
                    self.log("ooooooooooooooooooooooo")
                    continue

        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
